package battle{		//Coordinates attacks from party and enemy		public class BattleOrganizer {		public var allyParty:Array;		public var enemyParty:Array;				public var allArray:Array = new Array();				public function BattleOrganizer(aP:Array, eP:Array) {			allyParty = aP;			enemyParty = eP;						//Set allies			for(var i:int = 0; i < allyParty.length; i++){				allyParty[i].isAlly = true;			}					}				//Returns string of ally names		public function getAllyNames():Array{			var names:Array = new Array();			for(var i:int = 0; i < allyParty.length; i++){				names[i] = allyParty[i].fighterName;			}						return names;		}				//Returns string of enemy names		public function getEnemyNames():Array{						var names:Array = new Array();			for(var i:int = 0; i < enemyParty.length; i++){				names[i] = enemyParty[i].fighterName;			}						return names;		}				//Sets up all array		public function sortBySpeed():void{			//Create combined array			allArray = allyParty.concat(enemyParty);						//Sort by speed			allArray.sortOn("speed", Array.NUMERIC);						/*			for(var i:int = 0; i < allArray.length; i++){				trace(allArray[i].getName() + " " + allArray[i].speed);			}			*/		}				//Gets the last fighter in the last		public function getNextFighter():FighterInfo{			return allArray[allArray.length - 1];		}		//Returns alive allies		public function getAliveAllies():Array{			var alive:Array = new Array();			for(var i:int = 0; i < allyParty.length; i++){				if(!allyParty[i].isDead){					alive.push(allyParty[i]);				}			}						return alive;		}	}	}