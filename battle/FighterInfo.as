package battle{		import inven.Equipment;	import inven.Item;	import inven.Potion;	import inven.Armor;	import inven.Weapon;		//Stores info about fighters (party members and enemies)		public class FighterInfo {				var fighterName:String;				var stats:Array;				public var currHP:int;		var currSP:int;				var strength:int;		var defense:int;		public var speed:int;		var luck:int;				var maxHP:int;		var maxSP:int;		var baseMaxHP:int;		var baseMaxSP:int;				var armor:Equipment;		var weapon:Equipment;				public var skillSet:Array;				var exp:int = 0;				public var isDead:Boolean = false;		public var canPlayDeath:Boolean = false;				//Fight variables		public var isAlly:Boolean = false;				/*		-1 = NONE		0 = Attack		1 = Skill		2 = Item		3 = Run		*/		public var currentMove:int = 0;				public var currentSkill:Skill;		public var currentSkillIndex:int = 0;				public var target:FighterInfo;		public var targetIndex:int;				public var currentItem:Item;		public var currentItemIndex:int;				public var isRanAway:Boolean = false;				//TEMP: text plays when character is dead and trying to be in battle		public var errorArray:Array;				//Enemy disp variables		public var isTakingDamage:Boolean = false;		public var damageTaken:int;				/*		CONSTRUCTOR				Name		Stat array		Armor		Weapon		*/		public function FighterInfo(nm:String, s:Array, a:Equipment, w:Equipment) {			fighterName = nm;						stats = s;						currHP = s[0];			currSP = s[1];			strength = s[2];			defense = s[3];			speed = s[4];			luck = s[5];			baseMaxHP = s[6];			baseMaxSP = s[7];						armor = a;			weapon = w;						updateStats();						errorArray = new Array(fighterName + " cannot fight!");		}				//GETTERS AND SETTERS		public function getArmor():Equipment{			return armor;		}		public function getWeapon():Equipment{			return weapon;		}		public function getStats():Array{			return stats;		}		public function getName():String{			return fighterName;		}		public function setSkillByNum(n:int){			currentSkillIndex = n;			currentSkill = skillSet[n];		}		public function setTarget(t:FighterInfo, n:int):void{			target = t;			targetIndex = n;		}		public function setItem(item:Item, n:int):void{			currentItem = item;			currentItemIndex = n;		}				//Updates hp and sp based on armor + weapon stats		public function updateStats():void{			maxHP = baseMaxHP + armor.getStats()[6] + weapon.getStats()[6];			maxSP = baseMaxSP + armor.getStats()[7] + weapon.getStats()[7];		}				//Equips armor and weapons		public function equip(equipment:Equipment):Array{						if(equipment is Armor){				armor = equipment;			}			else if(equipment is Weapon){				weapon = equipment;			}			else{				return new Array("Error");			}						updateStats();						return new Array(fighterName + " equipped " + equipment.getName());		}				//Return string of skills		public function getSkillNames():Array{			var names:Array = new Array();			for(var i:int = 0; i < skillSet.length; i++){				names[i] = skillSet[i].skillName;			}						return names;		}		//Heal self		public function heal(potion:Potion):Array{						currHP = currHP + potion.getHPRecv();			currSP = currSP + potion.getSPRecv();						if(currHP > maxHP){				currHP = maxHP;			}			if(currSP > maxSP){				currSP = maxSP;			}						//Return message			var originalArray:Array = new Array();						if(potion.getHPRecv() > 0){				originalArray.concat(fighterName + " restored " + potion.getHPRecv() + " HP!");				originalArray = new Array(fighterName + " restored " + potion.getHPRecv() + " HP!")			}			if(potion.getSPRecv() > 0){				originalArray.concat(fighterName + " restored " + potion.getSPRecv() + " SP!");				originalArray = new Array(fighterName + " restored " + potion.getSPRecv() + " SP!")			}			if(potion.getSPRecv() > 0 && potion.getHPRecv() > 0){				originalArray = new Array((fighterName + " restored " + potion.getHPRecv() + " HP!"), (fighterName + " restored " + potion.getSPRecv() + " SP!"))			}						return originalArray;		}				//Attacks an enemy		public function attackFoe(baseDamage:int = 0):Array{									//If fighter is still alive			if(!isDead){				//Calculate base damage				var damage:int = baseDamage + strength + armor.getStats()[2] + weapon.getStats()[2] - target.defense - target.armor.getStats()[3] - target.weapon.getStats()[3];								//Turns negative damage to 1				if(damage < 0){					target.currHP -= 1;										//Updates enemy display					target.isTakingDamage = true;					target.damageTaken = 1;										if(target.currHP == 0){						target.isDead = true;					}										return new Array(fighterName + " dealt 1 damage to " + target.fighterName + "!");				}								//Apply luck				if(Math.floor(Math.random() * luck) < Math.floor(Math.random() * 3)){					damage = 0;				}				else{					damage = damage + (Math.random() * 10);				}								if(damage == 0){					return new Array(fighterName + " missed!")				}				else{					//Deals damage					if(damage >= target.currHP){						target.currHP = 0;						target.isDead = true;					}					else{						target.currHP -= damage;					}										//Updates enemy display					target.isTakingDamage = true;					target.damageTaken = damage;										//Updates target death					target.updateDeath();										var curr:Array =  new Array(fighterName + " dealt " + damage + " damage to " + target.fighterName + "!");					if(target.isDead){						curr = curr.concat(target.getName() + " is dead!");					}					return curr;				}			}			else{				return errorArray;			}		}						//Use a skill move		public function useSkill():Array{			//If still alive			if(!isDead){				if(currSP - currentSkill.cost >= 0){					//Deal damage					var defString:Array = attackFoe(currentSkill.damage);										//Subtract sp					currSP -= currentSkill.cost;										return new Array(fighterName + " used " + currentSkill.skillName + "!").concat(defString);				}				else{					return new Array(fighterName + " did not have enough energy!");				}			}			else{				return new Array(fighterName + " is dead!");			}		}				//Use a potion		public function usePotion():Array{						//If is still alive			if(!isDead){								var returnArray:Array = new Array(fighterName + " used a " + currentItem.getName() + " on " + target.getName());				var defString:Array = new Array("...but there was no target!");								if(!target.isDead){					defString = target.heal(Potion(currentItem));									}								return returnArray.concat(defString);			}			else{				return errorArray;			}		}				//Try running		public function tryRun():Array{						var def:Array = new Array(fighterName + " tried to escape...");						//If is still alive			if(!isDead){				//Temporary get above quota				if(Math.floor(Math.random() * luck) > Math.floor(Math.random() * 30)){					isRanAway = true;					return def.concat(new Array("Success!"));				}				else{					return def.concat(new Array("...but it failed!"));				}			}			else{				return errorArray;			}		}				//Update player death		public function updateDeath():void{			if(this.currHP <= 0){				isDead = true;			}		}				public function reset():void{						isDead = false;						currHP = maxHP;			currSP = maxSP;					}	}	}