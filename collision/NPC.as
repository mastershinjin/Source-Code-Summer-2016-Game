package collision{	import flash.display.MovieClip;	import flash.events.Event;	public class NPC extends BoxCollider{				protected var speech:Array;		protected var coverImg:NPCCover_1 = new NPCCover_1();		protected var hasTalkedToMe:Boolean = false;		protected var isTalkingToMe:Boolean = false;		protected var afterSpeech1:Array;				protected var npcData:NPCData;				private var isAfterSet:Boolean = false;				protected var linkedEvent:GameEvent;						function NPC(nD:NPCData, gE:GameEvent = null):void{						npcData = nD;						//Calls superclass constructor			super(npcData.npcX, npcData.npcY, npcData.npcWidth, npcData.npcHeight);						//Sets speech data			speech = npcData.speech;						if(npcData.afterSpeech == null){				afterSpeech1 = npcData.speech;			}			else{				afterSpeech1 = npcData.afterSpeech;			}						//Sets talked to			hasTalkedToMe = npcData.hasTalkedToMe;						if(hasTalkedToMe){				speech = afterSpeech1;				isAfterSet = true;			}						addEventListener(Event.ENTER_FRAME, checkIfTalked);						coverImg.gotoAndStop(npcData.costume);						//Sets hit box			hitBox.width = coverImg.width;			hitBox.height = 40;			hitBox.y = coverImg.height - 40;						//Adds cover image			this.addChild(coverImg);						//Sets optional linked event			linkedEvent = gE;						//Adjusts layering			addEventListener(Event.ENTER_FRAME, adjustLayer);			addEventListener(Event.REMOVED, remove);		}				//Executes when child is removed		override public function remove(event:Event):void{			super.remove(event);						removeEventListener(Event.ENTER_FRAME, checkIfTalked);			removeEventListener(Event.ENTER_FRAME, adjustLayer);		}						//Checks if NPC is being talked to		public function checkIfTalked(event:Event):void{			//Checks if player has pressed z and is not in the inventory			if(_root.zDown && !_root.isPlayingText && _root.textBoxCoolDown == 0 && !_root.isInvUp){								//Sets afterspeech				if(npcData.hasTalkedToMe && !isAfterSet && !npcData.giftGiven){					speech = afterSpeech1;					isAfterSet = true;				}				else if(npcData.giftGiven){					//Update speech					speech = npcData.afterGiftSpeech;				}								//Checks talking from different directions				if(_root.compassDir == 1 && canMoveUp == false){					_root.turnOnTextBox(speech);					npcData.hasTalkedToMe = true;					isTalkingToMe = true;				}				else if(_root.compassDir == 2 && canMoveRight == false){					_root.turnOnTextBox(speech);					npcData.hasTalkedToMe = true;					isTalkingToMe = true;				}				else if(_root.compassDir == 3 && canMoveDown == false){					_root.turnOnTextBox(speech);					npcData.hasTalkedToMe = true;					isTalkingToMe = true;				}				else if(_root.compassDir == 4 && canMoveLeft == false){					_root.turnOnTextBox(speech);					npcData.hasTalkedToMe = true;					isTalkingToMe = true;				}			}						else if(!_root.isPlayingText){				isTalkingToMe = false;							}						//TEMP: FIX BECAUSE IT MESSES WITH CHOICE NPCS BY SCREWING UP THE EVENT TRIGGER!!!!!!			//If talked to, trigger event if it exists											}				//Adjust the layer of the NPC with the player		function adjustLayer(event:Event):void{			if(this.y + this.height > _root.player.y + _root.player.height){				parent.setChildIndex(this, parent.numChildren - 1);			}			else{				parent.setChildIndex(this, 0);			}		}				//Getter		public function getTalkedToMe():Boolean{			return npcData.hasTalkedToMe;		}	}}